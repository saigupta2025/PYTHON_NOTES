control flow statements in Python::
1. Conditional statements (Decision making statements) :: if, if-else, if-elif-else
2. Looping statements (Iterative statements):: for loop, while loop
3. Jumping statements (Control flow altering statements) :: break, continue, pass
--------------------------------------------------------------------------------------------------------------
if statement: Executes a block of code only if the specified condition is true.
syntax:  if condition:
    # Code to be executed if the condition is True
    # This block is defined by indentation

	if(condition):
		print ("aaaaaaa")

EX::
score = 75

if score >= 60:
    print("You passed the exam!")
--------------------------------------------------------------------------------------------------------
if-else statement: Executes one block of code if the condition 
is true and another block if the condition is false.

syntax:  if condition:
   
	 # Code block to execute if the condition is True
else:
   
 	# Code block to execute if the condition is False

	if(condition):
		print ("aaaaaaa")
	 else:
		print ("eeeeeee")
EX:: 
# Get input from the user

number = int(input("Enter an integer: "))


# Check if the number is even or odd using the if-else statement

if number % 2 == 0:
    
	print(f"The number {number} is even.")

else:
    
	print(f"The number {number} is odd.")

--------------------------------------------------------------------------------------------------------
if-elif-else ladder: Allows for multiple conditions to be checked sequentially. 
The first elif or else block whose condition is true is executed.

syntax: if condition1:
   
	 # Code to execute if condition1 is True

elif condition2:
   
 	# Code to execute if condition1 is False and condition2 is True

elif condition3:
  
  	# Code to execute if condition1 and condition2 are False and condition3 is True

else:
    
	# Code to execute if all preceding conditions are False
EX:: 
score = 75


if score >= 90:
    
	print("Grade: A")

elif score >= 80:
    
	print("Grade: B")

elif score >= 70:
    
	print("Grade: C")

elif score >= 60:
   
	print("Grade: D")

else:
   
	print("Grade: F")

---------------------------------------------------------------------------------------------------
for loop::for loop: Iterates over a sequence (like a list, tuple, string, or range) and executes 
a block of code for each item in the sequence.


syntax:   for item in iterable:
   
	 # Code block to be executed for each item
   
	 # This code is indented

EX::
1.
for x in range(5):
	print(x)

2. 
fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    
	print(fruit)
---------------------------------------------------------------------------------------------------
while loop::while loop: Executes a block of code repeatedly as long as a specified condition remains true.
3 things to remember here:
>> Intital value (loop starting value)
>> condition (loop ending value)
>> update (change value , its like inc/dec)


syntax:
while condition:
    
# Code block to be executed repeatedly
  
  # as long as the 'condition' is True

EX: # Initialize a counter variable

count = 0


# Loop as long as 'count' is less than 5

while count < 5:
    
	print(f"The current count is: {count}")
    
# Increment the counter in each iteration
    
count += 1 


	print("Loop finished. The final count is:", count)
-----------------------------------------------------------------------------------------------------------------







